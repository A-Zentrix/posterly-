from PIL import Image, ImageDraw, ImageFont
import os
from uuid import uuid4

def add_watermark(image_path: str, text: str = "Generated by A-Zentrix", output_dir: str = "static/posters") -> str | None:
    try:
        if not os.path.exists(image_path):
            print(f"Error: Input image not found at {image_path}")
            return None

        with Image.open(image_path) as base:
            if base.mode != 'RGBA':
                base = base.convert("RGBA")

            watermark_layer = Image.new("RGBA", base.size, (255, 255, 255, 0))
            draw = ImageDraw.Draw(watermark_layer)

            font_size = 36
            font_path = "arial.ttf"
            try:
                font = ImageFont.truetype(font_path, font_size)
            except IOError:
                print(f"Warning: Font '{font_path}' not found. Using default font.")
                try:
                    font = ImageFont.load_default()
                except Exception as e:
                    print(f"Error loading default font: {e}")
                    return None

            try:
                text_bbox = draw.textbbox((0, 0), text, font=font)
                textwidth = text_bbox[2] - text_bbox[0]
                textheight = text_bbox[3] - text_bbox[1]
            except AttributeError:
                print("Warning: Using legacy textlength/font metrics for positioning.")
                try:
                    textwidth = draw.textlength(text, font=font)
                    ascent, descent = font.getmetrics()
                    textheight = ascent + descent
                except AttributeError:
                    print("Warning: Cannot accurately determine text height with this font. Using fallback estimate.")
                    textwidth = len(text) * font_size * 0.6
                    textheight = font_size

            margin = 40
            x = max(base.width - textwidth - margin, 0)
            y = max(base.height - textheight - margin, 0)

            draw.text((x, y), text, font=font, fill=(255, 255, 255, 180))
            watermarked = Image.alpha_composite(base, watermark_layer)

            os.makedirs(output_dir, exist_ok=True)
            output_filename = f"final_{uuid4().hex}.png"
            output_path = os.path.join(output_dir, output_filename)

            watermarked.save(output_path, "PNG")
            print(f"Watermarked image saved to: {output_path}")
            return output_path

    except FileNotFoundError:
        print(f"Error: Input image not found at {image_path}")
        return None
    except IOError as e:
        print(f"Error processing image or font: {e}")
        return None
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
        return None